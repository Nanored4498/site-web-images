#!/usr/bin/env python3

import pylab as pl
import plot_opt
import math
import cmath
import matplotlib.animation as anim

"""
def sym(ps):
	l = len(ps)
	for i in range(l-1):
		a, b = ps[l-2-i]
		ps.append((2.8 - a, b))
ps = [(0, 0), (-1, 1), (-2, 2), (-2.2, 3), (-2, 4), (-1, 5), (0.3, 5.5),
	  (0, 6.6), (-0.6, 7.6), (-1.3, 8.5), (-1.8, 7.7), (-1.65, 6.8), (-1.25, 5.7), (-1, 5),
	  (-0.15, 5.32), (-0.55, 6.1), (-0.9, 6.05), (-0.65, 5.15), (0.3, 5.5), (1.4, 5.7)]
sym(ps)
ps2 = [(2.8, 2), (2.6, 2.7), (2.3, 3.2), (2, 3), (1.8, 2.5), (1.7, 2), (1.7, -0.45),
	   (2.8, 0), (2.4, -0.15), (2.4, 0.5), (2.2, 0.8),
	   (2.1, 0.5), (2.05, -0.3), (1.5, -0.56), (1.4, -0.56)]
sym(ps2)
ps += ps2 + [(0, 0)]
"""
#ps = [(-0.03149193548387098, -0.032619047619047624), (-0.03016129032258065, 0.012916666666666674), (-0.00243951612903226, 0.04029761904761907), (0.018850806451612898, 0.012619047619047627), (-0.029939516129032263, 0.01232142857142858), (0.01818548387096773, 0.012023809523809534), (0.01907258064516129, -0.028452380952380958), (0.00044354838709677324, -0.030238095238095244), (-0.0017741935483871069, -0.012083333333333335), (-0.012641129032258072, -0.012083333333333335), (-0.011532258064516139, -0.029345238095238098),(-0.04258064516129033, -0.033511904761904764), (-0.043245967741935495, -0.011190476190476188), (-0.039032258064516136, -0.0007738095238095238), (-0.043245967741935495, 0.009047619047619054), (-0.05056451612903227, 0.0069642857142857145), (-0.05233870967741937, -0.005535714285714283), (-0.04723790322580646, -0.012380952380952381), (-0.04723790322580646, -0.010297619047619049), (-0.04546370967741936, -0.031726190476190484), (-0.044576612903225815, -0.03440476190476191), (-0.03149193548387098, -0.032619047619047624)]
#ps = [(-0.005692204301075268, 0.0068408533948392525), (0.007318548387096779, 0.023418624765748866), (-0.00561827956989247, 0.006408389793859007), (-0.011088709677419352, 0.006985007928499334), (-0.005100806451612899, 0.013039498342222844), (-0.011088709677419352, 0.0068408533948392525), (-0.005396505376344091, 0.006120080726538843), (-0.004435483870967746, 0.009003171399740509), (-0.005248655913978495, 0.010877180337321601), (-0.006357526881720435, 0.012318725673922434), (-0.007762096774193553, 0.012318725673922434), (-0.008649193548387099, 0.011742107539282093), (-0.008944892473118277, 0.01030056220268126), (-0.009018817204301074, 0.009291480467060673), (-0.008649193548387099, 0.00784993513045984), (-0.008427419354838706, 0.007273316995819512), (-0.005470430107526875, 0.006264235260198925), (-0.0049529569892473035, -0.005700591033588026), (-0.008501344086021503, -0.014926481187833372), (-0.004805107526881722, -0.00598890010090819), (-0.0020698924731182844, -0.015070635721493454), (-0.004731182795698924, -0.006133054634568272), (-0.004731182795698924, -0.006133054634568272), (-0.005692204301075268, 0.0068408533948392525)]
ps = [(-0.05026881720430108, 0.03913146893469799), (-0.038514784946236565, 0.038987314401037906), (-0.044724462365591404, 0.038843159867377824), (-0.044724462365591404, 0.021544615828167787), (-0.04989919354838711, 0.014769352746143855), (-0.044798387096774195, 0.02168877036182787), (-0.044576612903225815, 0.028896497044832048), (-0.04243279569892473, 0.028752342511171966), (-0.04088037634408603, 0.03077050598241314), (-0.03954973118279571, 0.030914660516073222), (-0.03829301075268818, 0.02904065157849213), (-0.03829301075268818, 0.025869251837970286), (-0.03910618279569893, 0.023851088366729126), (-0.04043682795698925, 0.02240954303012828), (-0.04176747311827958, 0.023995242900389208), (-0.04258064516129033, 0.026157560905290464), (-0.042137096774193555, 0.028752342511171966), (-0.04088037634408603, 0.03062635144875306), (-0.03940188172043011, 0.03077050598241314), (-0.03829301075268818, 0.029328960645812294), (-0.03821908602150538, 0.027599106241891297), (-0.03696236559139785, 0.02961726971313247), (-0.03504032258064516, 0.024571861035029535), (-0.03304435483870968, 0.029184806112152212), (-0.03496639784946237, 0.025004324636009795), (-0.038514784946236565, 0.01750828888568544), (-0.03518817204301076, 0.024571861035029535), (-0.03067876344086022, 0.024860170102349713), (-0.02956989247311828, 0.027022488107250955), (-0.03030913978494624, 0.028896497044832048), (-0.031787634408602154, 0.028896497044832048), (-0.032305107526881725, 0.02659002450627071), (-0.03215725806451613, 0.023562779299408948), (-0.031122311827956994, 0.02240954303012828), (-0.029865591397849466, 0.02240954303012828), (-0.028608870967741937, 0.022553697563788375), (-0.027426075268817206, 0.02529263370332996), (-0.0275739247311828, 0.02831987891019172), (-0.027426075268817206, 0.02529263370332996), (-0.02705645161290323, 0.02298616116476862), (-0.0258736559139785, 0.022265388496468197), (-0.024838709677419357, 0.022553697563788375), (-0.024395161290322584, 0.025869251837970286), (-0.024395161290322584, 0.02774326077555138), (-0.024395161290322584, 0.02716664264091105), (-0.024395161290322584, 0.025580942770650122), (-0.024395161290322584, 0.024427706501369453), (-0.023655913978494626, 0.022697852097448457), (-0.02276881720430108, 0.022553697563788375), (-0.022103494623655913, 0.023851088366729126), (-0.021290322580645164, 0.025148479169669877), (-0.02084677419354839, 0.026013406371630382), (-0.020255376344086022, 0.02716664264091105), (-0.020107526881720433, 0.027310797174571133), (-0.021290322580645164, 0.025148479169669877), (-0.022399193548387097, 0.028031569842871543), (-0.021364247311827955, 0.02529263370332996), (-0.01973790322580645, 0.022697852097448457), (-0.014415322580645158, 0.006696698861179171), (-0.01973790322580645, 0.022697852097448457), (-0.022620967741935484, 0.006120080726538843), (-0.02099462365591398, 0.015345970880784182), (-0.017594086021505376, 0.01635505261640477), (-0.014415322580645158, 0.006696698861179171), (-0.01426747311827957, 0.011597953005622011), (-0.013380376344086023, 0.01275118927490268), (-0.012049731182795696, 0.011886262072942189), (-0.011754032258064519, 0.010012253135361096), (-0.011532258064516132, 0.00784993513045984), (-0.01116263440860215, 0.007129162462159416), (-0.010423387096774192, 0.007129162462159416), (-0.010127688172043015, 0.009003171399740509), (-0.010127688172043015, 0.010588871270001424), (-0.009979838709677419, 0.011742107539282093), (-0.009314516129032252, 0.012462880207582516), (-0.008427419354838706, 0.012462880207582516), (-0.008427419354838706, 0.011453798471961929), (-0.00805779569892473, 0.01030056220268126), (-0.00805779569892473, 0.009291480467060673), (-0.007762096774193553, 0.007705780596799758), (-0.00672715053763441, 0.007994089664119922), (-0.006061827956989244, 0.009723944068040932), (-0.006061827956989244, 0.011742107539282093), (-0.006209677419354839, 0.012318725673922434), (-0.00672715053763441, 0.01275118927490268), (-0.00672715053763441, 0.01448104367882369), (-0.006209677419354839, 0.014769352746143855), (-0.0055443548387096725, 0.014769352746143855), (-0.0055443548387096725, 0.013471961943203103), (-0.006061827956989244, 0.013039498342222844), (-0.006061827956989244, 0.012607034741242598), (-0.006061827956989244, 0.009723944068040932), (-0.0055443548387096725, 0.008859016866080427), (-0.00487903225806452, 0.008859016866080427), (-0.0036962365591397817, 0.009291480467060673), (-0.005100806451612899, 0.012462880207582516), (-0.003622311827956984, 0.00914732593340059), (-0.002956989247311831, 0.013039498342222844), (-0.0033266129032258063, 0.009291480467060673), (-0.0022177419354838662, 0.009723944068040932), (-0.001182795698924724, 0.010012253135361096), (-0.0005174731182795711, 0.010877180337321601), (-0.0003696236559139754, 0.011886262072942189), (-0.0003696236559139754, 0.012462880207582516), (-0.000591397849462369, 0.012895343808562762), (-0.0012567204301075219, 0.013471961943203103), (-0.0019220430107526887, 0.012462880207582516), (-0.0016263440860214973, 0.011309643938301847), (-0.001182795698924724, 0.01073302580366152), (-0.0007392473118279508, 0.010444716736341342), (-0.0001478494623655957, 0.010444716736341342), (-7.392473118279785e-05, 0.010444716736341342), (0.0007392473118279647, 0.010444716736341342), (0.00110887096774194, 0.010444716736341342), (0.00044354838709677324, 0.01318365287588294), (0.00044354838709677324, 0.014336889145163609), (0.0009610215053763443, 0.014625198212483773), (0.0019959677419354865, 0.014913507279803936), (0.000591397849462369, 0.014336889145163609), (0.001182795698924738, 0.010588871270001424), (0.0019959677419354865, 0.010877180337321601), (0.0030309139784946287, 0.011021334870981683), (0.003918010752688175, 0.011597953005622011), (0.0036223118279569977, 0.013039498342222844), (0.002809139784946235, 0.012895343808562762), (0.00243951612903226, 0.013327807409543022), (0.00243951612903226, 0.014625198212483773), (0.0035483870967742, 0.015778434481764442), (0.0025134408602150576, 0.01448104367882369), (0.0026612903225806533,0.01275118927490268), (0.0036962365591397817, 0.01275118927490268), (0.004065860215053771, 0.011453798471961929), (0.0043615591397849485, 0.011453798471961929), (0.005174731182795697, 0.011742107539282093), (0.00672715053763441, 0.012462880207582516), (0.00672715053763441, 0.014625198212483773), (0.0061357526881720414, 0.01649920715006485), (0.004952956989247317, 0.015345970880784182), (0.005174731182795697, 0.014048580077843431), (0.005544354838709686, 0.012462880207582516), (0.005840053763440864, 0.011886262072942189), (0.007022849462365602, 0.01275118927490268), (0.00672715053763441, 0.014913507279803936), (0.006505376344086031, 0.01693167075104511), (0.007170698924731184, 0.012895343808562762), (0.007392473118279577, 0.012895343808562762), (0.008205645161290326, 0.013616116476863185), (0.007983870967741946, 0.015057661813464018), (0.007540322580645159, 0.017075825284705193), (0.007170698924731184, 0.017075825284705193), (0.006875000000000006, 0.018517370621306026), (0.0072446236559139815, 0.019093988755946367), (0.007614247311827957, 0.018661525154966108), (0.007909946236559148, 0.018229061553985862), (0.007688172043010755, 0.017219979818365275), (0.008279569892473124, 0.013760271010523267), (0.009462365591397848, 0.014625198212483773), (0.008870967741935493, 0.01808490702032578), (0.009905913978494621, 0.01923814328960645), (0.009092741935483872, 0.017796597953005616), (0.009610215053763443, 0.014913507279803936), (0.010349462365591408, 0.015345970880784182), (0.011236559139784955, 0.016210898082744687), (0.011975806451612905, 0.018373216087645944), (0.012049731182795703, 0.019526452356926613), (0.011680107526881728, 0.019670606890586695), (0.01049731182795699, 0.01938229782326653), (0.010866935483870965, 0.01808490702032578), (0.011532258064516132, 0.017364134352025357), (0.011975806451612905, 0.017364134352025357), (0.01271505376344087, 0.01693167075104511), (0.013232526881720441, 0.01693167075104511), (0.013380376344086023, 0.04878982268992359), (-0.050194892473118286, 0.04792489548796308), (-0.05071236559139786, 0.0013629811157560845), (0.013528225806451619, 0.0006422084474556611), (0.01345430107526882, 0.04850151362260342), (-0.05012096774193549, 0.04792489548796308), (-0.05012096774193549, 0.04792489548796308), (-0.05026881720430108, 0.03913146893469799)]
ps = [(16/9*a, b) for a, b in ps]

minX, maxX = 1000, -1000
minY, maxY = 1000, -1000
for a, b in ps:
	minX = min(minX, a)
	maxX = max(maxX, a)
	minY = min(minY, b)
	maxY = max(maxY, b)
ad = 0.005
w, h = maxX - minX + 2*ad, maxY - minY + 2*ad
co = (20 / w / h)**0.5
fig = pl.figure(figsize=(w*co, h*co))
pl.xlim(minX - ad, maxX + ad)
pl.ylim(minY - ad, maxY + ad)

cps = [complex(a, b) for a, b in ps]
def add(cps):
	ncps = []
	for i in range(len(cps)-1):
		ncps += [cps[i], (cps[i] + cps[i+1]) / 2]
	return ncps + [cps[-1]]
for _ in range(5):
	cps = add(cps)

T = len(cps)-1
N = 150
c = []
ns = list(range(-N+1, N))
for n in ns:
	su = 0
	v = 1
	mv = cmath.exp(- 2 * math.pi * 1j * n / T)
	for i in range(T):
		su += cps[i] * v
		v *= mv
	c.append(su / T)

c2 = []
for i in range(len(c)):
	if ns[i] == 0:
		pos0 = c[i]
	else:
		c2.append((c[i], ns[i]))
c2.sort(key=lambda x: -abs(x[0]))
mr = abs(c2[0][0])

def circle(center, size):
	nps = max(8, int(64 * size / mr))
	x0, y0 = center.real, center.imag
	cirX, cirY = [], []
	for i in range(nps):
		cirX.append(x0 + size * math.cos(2 * math.pi * i / nps))
		cirY.append(y0 + size * math.sin(2 * math.pi * i / nps))
	cirX.append(cirX[0])
	cirY.append(cirY[0])
	return pl.plot(cirX, cirY, color='red', linewidth=0.5)[0]

x, y = [], []
np = 1000
temps = 7500
fps = 10
inter = np / (temps * fps / 1000 * 0.9)
t = inter
ims = []
show = False
for i in range(np):
	if t >= inter or i == np-1:
		t -= inter
		show = True
		im = []
	else:
		show = False
	p = pos0
	en = [cmath.exp(2 * math.pi * 1j * ns[0] * i / np)]
	mul = cmath.exp(2 * math.pi * 1j * i / np)
	for j in range(len(ns)-1):
		en.append(en[j] * mul)
	for coef, n in c2:
		p2 = p + en[n - ns[0]] * coef
		if show:
			im.append(pl.plot([p.real, p2.real], [p.imag, p2.imag], color='purple')[0])
			im.append(circle(p, abs(coef)))
		p = p2
	x.append(p.real)
	y.append(p.imag)
	t += 1
	if show:
		im.append(pl.plot(x, y, color='blue')[0])
		ims.append(im)
	print(i)
x.append(x[0])
y.append(y[0])
ims += [[pl.plot(x, y, color='blue')[0]]] * int(0.1 * temps * fps / 1000)

ani = anim.ArtistAnimation(fig, ims, interval = temps // len(ims), repeat=True)
ani.save('res.gif', writer='imagemagick')
#pl.show()